### **Objective**  
You will receive **two separate financial tables** in Markdown format. These tables:  
- **Have different structures** (different rows, columns, and financial metrics).  
- **Do not have an identical format** (column order and labels may vary).  
- **May reference the same underlying financial values using different terminology, structure, or presentation.**  

Your task is to analyze both tables and determine **which values are conceptually referencing the same underlying financial metric or entity** based on **context, row/column labels, and financial meaning**.  

ðŸš¨ **Important Rule: You are NOT checking whether the numerical values are actually the same. You are determining whether two values from different tables should logically refer to the same real-world quantity.** ðŸš¨  

---

### **Input Format**  

1. **Two tables in Markdown format**  
   - Each numerical value is enclosed in a unique identifier using the format:  
     ```
     <id="UUID">VALUE</>
     ```
   - Example:  
     ```
     <id="64437283-daae-4065-95ed-7c9347677ba8">5,243</>
     ```
   - The `UUID` is unique for each value, and **you must use it to reference comparisons** instead of the raw number.

2. **Explicit comparisons list**  
   - A set of UUID pairs (`i == j`) that we want you to check.  
   - These pairs **always consist of one UUID from Table 1 and one from Table 2**.  
   - If the values conceptually reference the same real-world metric, return `True`; otherwise, return `False`.  
   - Example:
     ```
     "64437283-daae-4065-95ed-7c9347677ba8 == 42ad7200-714b-4426-9f6b-ea361089a3d4"
     ```

---

### **Output Format**  
Your response must be structured as a Python object with the following properties:  

- **Explicit comparisons**: A dictionary where the keys are `UUID == UUID` (always one UUID from Table 1 and one from Table 2), and the values are `True` if the two UUIDs refer to the same financial metric, `False` if they do not.  
- **Additional matches**: A list of `TableDirectMatch` objects representing other value pairs (one from each table) that should be considered conceptually equivalent but were not explicitly requested.  

#### **Example Output:**  
```python
{
  "64437283-daae-4065-95ed-7c9347677ba8 == 42ad7200-714b-4426-9f6b-ea361089a3d4": True,
  "79a957ce-4ba0-4e49-a77c-5b3b58378b28 == 148955a2-a76b-46e1-a384-d0c13c16ac11": False,
  "other_values_that_must_be_equal": [
    TableDirectMatch(
        table1_textract_id="d7c17d47-a967-4c2e-bbc1-5bcce297c337",
        table2_textract_id="ea802f51-2c60-494d-8039-d18541cf508e"
    ),
    TableDirectMatch(
        table1_textract_id="1bbf6aa5-8047-43b2-95f6-4a91856cf614",
        table2_textract_id="efd75c17-0a4a-42ef-a471-b0a15e89f45e"
    )
  ]
}
```

---

### **Processing Guidelines**  

1. **Determine Conceptual Equivalence Based on Context, Not Numerical Value**  
   - Your job is NOT to check whether the numbers themselves match.  
   - Instead, determine whether the values in **Table 1 and Table 2 logically refer to the same financial quantity** based on the row/column labels and structure.  

2. **Check the explicit comparisons first**  
   - Compare the values inside `<id="UUID">VALUE</>` for each given `i == j` pair.  
   - Ensure that `i` comes from Table 1 and `j` comes from Table 2.  
   - If both UUIDs **describe the same real-world metric, even if the values differ**, return `True`. Otherwise, return `False`.  

3. **Identify additional matches**  
   - Look for numbers that **should** be referencing the same financial metric across tables, even if they were not explicitly requested.  
   - If a number in Table 1 references the same concept as a number in Table 2, **even if its label differs**, add its UUIDs as a `TableDirectMatch` object to `other_values_that_must_be_equal`.  

ðŸš¨ **Do not compare two values from the same table. Matches must always be between Table 1 and Table 2.** ðŸš¨  

4. **Match by Meaning, Not Just Position**  
   - Example:  
     - "Revenue (2019)" in Table 1 might correspond to "Net Sales (2019)" in Table 2.  
     - "EBITDA" in one table may be called "Operating Profit" in another.  

5. **Ignore Formatting Differences**  
   - `(1,234)` and `-1234` should be considered equivalent.  
   - `1.2bn` and `1,200m` should be considered equivalent.  

6. **Use Financial Logic Where Needed**  
   - Example: "Gross Profit = Revenue - Cost of Goods"  
   - If Revenue and Cost of Goods match, Gross Profit should also match.  

7. **Ensure Consistency**  
   - If a calculated field (e.g., `EBITDA = Net Income + Interest + Taxes + Depreciation`) does not align between tables, flag potential inconsistencies.  
   - Do not assume missing valuesâ€”only compare what exists.  

---

### **Example Input Tables (Simplified for Clarity)**  

#### **Table 1**  
```plaintext
| Metric               | 2019        | 2020        | 2021        |
|----------------------|------------|------------|------------|
| Revenue             | <id="A1">5,243</> | <id="A2">5,516</> | <id="A3">5,312</> |
| Gross Profit        | <id="B1">1,678</> | <id="B2">1,787</> | <id="B3">1,753</> |
| Net Income         | <id="C1">843</>   | <id="C2">915</>   | <id="C3">882</>   |
```

#### **Table 2**  
```plaintext
| Category             | FY2019      | FY2020      | FY2021      |
|----------------------|------------|------------|------------|
| Net Sales           | <id="X1">5,243</> | <id="X2">5,516</> | <id="X3">5,312</> |
| Profit Before Tax   | <id="Y1">1,678</> | <id="Y2">1,787</> | <id="Y3">1,753</> |
| Net Earnings       | <id="Z1">843</>   | <id="Z2">915</>   | <id="Z3">882</>   |
```

---

### **Explicit Comparisons to Evaluate**
```plaintext
A1 == X1  
C1 == Z1  
```

---

### **Expected Output**  
```python
{
  "A1 == X1": True,  # Revenue in Table 1 is conceptually the same as Net Sales in Table 2
  "C1 == Z1": True,  # Net Income in Table 1 is conceptually the same as Net Earnings in Table 2
  "other_values_that_must_be_equal": [
    TableDirectMatch(
        table1_textract_id="A2",
        table2_textract_id="X2"
    ),
    TableDirectMatch(
        table1_textract_id="A3",
        table2_textract_id="X3"
    ),
    TableDirectMatch(
        table1_textract_id="B1",
        table2_textract_id="Y1"
    ),
    TableDirectMatch(
        table1_textract_id="B2",
        table2_textract_id="Y2"
    ),
    TableDirectMatch(
        table1_textract_id="B3",
        table2_textract_id="Y3"
    )
  ]
}
```

---

### **Final Notes**  
ðŸš¨ **Your response must be based purely on conceptual equivalence, not numerical equality.** ðŸš¨  
- **You are identifying which values refer to the same underlying financial quantity.**  
- **You are NOT verifying that the numbers themselves are equal.**  
- **Only compare values across tables, never within the same table.**  